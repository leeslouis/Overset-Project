/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  plus                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (2.5 0 0);

boundaryField
{
    #includeEtc "caseDicts/setConstraintTypes"
    
    overset
    {
        type            overset;
	value		uniform (0 0 0);
    }

    wing
    {
        type		movingWallVelocity;
        value           uniform (0 0 0);
      
    }

    inlet
    {
        type            fixedValue;
        value           $internalField;
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           $internalField;
    }

    stationaryWalls
    {
        type            zeroGradient;
    }
    // overset
    // {
    //     type            overset;
	// value		$internalField;
    // }

    // wing
    // {
    //     type		movingWallVelocity;
    //     value           uniform (0 0 0);
      
    // }


    // outlet
    // {
    //     type            pressureInletOutletVelocity;   //calculated;
    //     value      uniform (0 0 0);
    //     // value           $internalField;
    // }

    // topAndBottom
    // {
    //     type            zeroGradient;
    // }

    // inlet
    // {
    //         name    movingInlet;
    //     type    codedFixedValue;
    //     codeInclude
    //     #{
    //         #include "fvCFD.H";
    //     #};

    //     codeOptions
    //     #{
    //         -I$(LIB_SRC)/dynamicMesh/dynamicMesh/lnInclude \
    //         -I$(LIB_SRC)/dynamicMesh/dynamicFvMesh/lnInclude \
    //         -I$(LIB_SRC)/finiteVolume/lnInclude \
    //         -I$(LIB_SRC)/postProcessing/functionObjects/forces/lnInclude \
    //         -I$(LIB_SRC)/meshTools/lnInclude
    //     #};

    //     codeLibs
    //     #{
    //         -ldynamicMesh \
    //         -ldynamicFvMesh \
    //         -lfiniteVolume \
    //         -lforces \
    //         -lmeshTools
    //     #};

    //     code
    //     #{
    //         const vector vel = vector(0,-0.5,0);

    //     const fvMesh& mesh = refCast<const fvMesh>(this->db());
    //     const fvPatch& p = patch();
    //     const polyPatch& pp = p.patch();
    //     const pointField& oldPoints = mesh.oldPoints();

    //     vectorField oldFc(pp.size());

    //     forAll(oldFc, i)
    //     {
    //     oldFc[i] = pp[i].centre(oldPoints);
    //     }

    //     const scalar deltaT = mesh.time().deltaTValue();

    //     const vectorField Up((pp.faceCentres() - oldFc)/deltaT);

    //     const volVectorField& U =
    //     static_cast<const volVectorField&>(internalField());

    //     scalarField phip
    //     (
    //     p.patchField<surfaceScalarField, scalar>(fvc::meshPhi(U))
    //     );

    //     const vectorField n(p.nf());
    //     const scalarField& magSf = p.magSf();
    //     tmp<scalarField> Un = phip/(magSf + VSMALL);

    //         operator==(vel + Up );
    //     #};
    //     value   uniform (0 0 0);

    // }


}

// ************************************************************************* //
